import logging
logging.basicConfig(level=logging.INFO)

from src.ffgen import ffgen
from src.codonUtils import utils
from src.codonTable import codonTable
from src.codonOptimizer import tableOptimizer
from src.thunderflask import thunderflask
from src.bacteria import strain

# define function for testing individual components of each module
def test(function, param, expected_val=None):
    logging.info("Evaluating {0}".format(function.__name__))
    try:
        return_val = function(param)
        # optionally check if returned values match expected values
        if (expected_val is not None) and (return_val != expected_val):
            log_string = "{0} returned unexpected value".format(
                function.__name__
            )

        else:
            log_string = "{0} passed!".format(function.__name__)
    except Exception as exc:
        return_val = None
        log_string = "{0} raised the following error: {1}".format(
                function.__name__, exc
        )
    # log results and return from tester with returned value
    logging.info(log_string)
    return return_val

# ffgen tests
ffquad = test(ffgen.quadruplet, None) # generic autogenerated quad table
ffquad16 = test(ffgen.quadruplet, [str(i) for i in range(16)]) # < 20 user specified amino acids
ffquad20 = test(ffgen.quadruplet, [str(i) for i in range(20)]) # 20 user specified amino acids
ffquad40 = test(ffgen.quadruplet, [str(i) for i in range(40)]) # >20 user specified amino acids
ffquad64 = test(ffgen.quadruplet, [str(i) for i in range(64)]) # maximum number of user specified amino acids
ffquad80 = test(ffgen.quadruplet, [str(i) for i in range(80)]) # too many user specified amino acids

# codonUtils tests
aa_counts = test(utils.getAAcounts, ffquad) # test getAAcounts
block_counts = test(utils.getBlockCounts, ffquad) # test getBlockCounts
distDict = test(utils.getCodonConnectivity, ffquad) # test getCodonConnectivity
resiDistDict = test(utils.getResiConnectivity, ffquad) # test getResiConnectivity
neighbors = test(utils.getCodonNeighbors, list(ffquad)[0])
silencicity = test(utils.silencicity, ffquad)
mutability = test(utils.mutability, ffquad)

# codonTable tests
